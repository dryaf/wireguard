---
- hosts: servers
  become: yes
  vars:
    wireguard_address: '10.99.0.1/24'
    wireguard_port: 51820
    dns_server: '10.99.0.1' # might want to run a dns proxy that filters bad stuff

  tasks:
    - name: Wait for dpkg/apt lock
      become: yes
      shell: |
        while sudo lsof /var/lib/dpkg/lock >/dev/null; do
          sleep 1
        done

    - name: Update and Upgrade all packages
      ansible.builtin.package:
        name: '*'
        state: latest
        use: auto

    - name: Install necessary packages
      ansible.builtin.package:
        name: ['wireguard', 'qrencode', 'zip', 'iptables-persistent', 'unattended-upgrades', 'update-notifier-common']
        state: present

    - name: Generate WireGuard server keys if not exist
      block:
        - name: Check if WireGuard private key exists
          stat:
            path: /etc/wireguard/privatekey
          register: privatekey

        - name: Generate WireGuard server keys
          command: wg genkey
          register: server_private_key
          changed_when: false
          when: not privatekey.stat.exists
          no_log: true

        - name: Write WireGuard private key
          copy:
            content: "{{ server_private_key.stdout }}"
            dest: /etc/wireguard/privatekey
          when: not privatekey.stat.exists
          no_log: true

        - name: Derive WireGuard server public key
          shell: wg pubkey < /etc/wireguard/privatekey
          register: server_public_key
          changed_when: false
          no_log: true
      become: yes

    - name: Read existing private key
      slurp:
        src: /etc/wireguard/privatekey
      register: existing_private_key
      no_log: true

    - name: Ensure ip forwarding is set up
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: 'net.ipv4.ip_forward', value: 1 }
        - { key: 'net.ipv6.conf.all.forwarding', value: 1 }

    - name: Enable unattended upgrades
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Allowed-Origins {
            "${distro_id}:${distro_codename}";
            "${distro_id}:${distro_codename}-security";
            "${distro_id}ESM:${distro_codename}";
          };
      notify:
        - Restart unattended-upgrades

    - name: Configure periodic updates
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::Unattended-Upgrade "1";
          APT::Periodic::AutocleanInterval "7";

    - name: Setup WireGuard configuration
      copy:
        content: |
          [Interface]
          Address = {{ wireguard_address }}
          ListenPort = {{ wireguard_port }}
          PrivateKey = {{ (server_private_key.stdout | default(existing_private_key.content | b64decode)) }}

          PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; iptables -t nat -A PREROUTING -i wg0 -p udp --dport 53 -j DNAT --to {{ dns_server }}:53; iptables -t nat -A PREROUTING -i wg0 -p tcp --dport 53 -j DNAT --to {{ dns_server }}:53
          PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; iptables -t nat -D PREROUTING -i wg0 -p udp --dport 53 -j DNAT --to {{ dns_server }}:53; iptables -t nat -D PREROUTING -i wg0 -p tcp --dport 53 -j DNAT --to {{ dns_server }}:53

          # Rest of your configuration
        dest: /etc/wireguard/wg0.conf
        owner: root
        group: root
        mode: '0600'
      no_log: false
      notify:
        - Restart wg-quick

    - name: Save iptables rules
      command: sh -c "iptables-save > /etc/iptables/rules.v4"

    - name: Enable and start WireGuard service
      systemd:
        name: wg-quick@wg0
        enabled: yes
        state: restarted

    - name: Check WireGuard server status
      command: wg show wg0
      register: wireguard_status
      ignore_errors: true

    - name: Display WireGuard server status
      debug:
        var: wireguard_status.stdout_lines

    - name: Fail if WireGuard server is not running
      fail:
        msg: "WireGuard server is not running correctly."
      when: wireguard_status.rc != 0

  handlers:
    - name: Restart unattended-upgrades
      systemd:
        name: unattended-upgrades
        state: restarted

    - name: Restart wg-quick
      systemd:
        name: wg-quick@wg0
        state: restarted
...
